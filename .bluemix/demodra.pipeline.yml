---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${DEMODRA_API_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      export PATH=/opt/IBM/node-v4.2/bin:$PATH
      npm install
      grunt dev-setup --no-color
- name: Deploy
  inputs:
  - type: job
    stage: BUILD
    job: Build
    dir_name: null
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ibm:ys1:us-south
      organization: jparra@us.ibm.com
      space: dev
      application: Weather-App-with-DRA
    script: |
      #!/bin/bash
      #cf push "${CF_APP}"


      #!/bin/bash
      # Push app
      set
      export CF_APP_NAME="dev-$CF_APP"
      cf push "${CF_APP_NAME}" -n ${CF_APP_NAME}
      #export APP_URL=http://$(cf app $CF_APP_NAME | grep urls: | awk '{print $2}')
      # View logs
      #cf logs "${CF_APP_NAME}" --recent
- name: Appscan 2
  inputs:
  - type: job
    stage: BUILD
    job: Build
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: ENV_NAME
    value: DEV
    type: text
  - name: APP_NAME
    value: Weather
    type: text
  - name: IDRADEBUG
    value: 'true'
    type: text
  - name: EXTENSION_DEBUG
    value: '1'
    type: text
  - name: DEBUG
    value: '1'
    type: text
  jobs:
  - name: Test
    type: tester
    extension_id: ibm.devops.services.pipeline.appscan.dynamic.builder.dratest
    target:
      region_id: ibm:ys1:us-south
      organization: jparra@us.ibm.com
      space: dev
    TARGET: http://dev-weather-app-with-dra.stage1.mybluemix.net/
    SETUP_SERVICE_SPACE: 'true'
    AD_SCAN_TYPE: Production
    WAIT_TIME: '59'
- name: DEV
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  jobs:
  - name: Unit Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.dra_upload_results
    APPLICATION_NAME: Weather
    FORMAT_SELECT: mocha
    LIFE_CYCLE_STAGE_SELECT: unittest
    ADDITIONAL_FORMAT_SELECT: istanbul
    ADDITIONAL_LIFE_CYCLE_STAGE_SELECT: code
    ADDITIONAL_LOG_FILE: ./tests/coverage/reports/coverage-summary.json
    LOG_FILE: ./mochatest.json
    ENVIRONMENT: DEV
    COMMAND: |
      #!/bin/bash
      export PATH=/opt/IBM/node-v4.2/bin:$PATH
      npm install
      grunt dev-test-cov --no-color -f   
  - name: Unit Test and Code Coverage Gate
    type: tester
    extension_id: ibm.devops.services.pipeline.dra_devops_gate
    CRITERIA: Unit Test and Code Coverage Checks
    APPLICATION_NAME: Weather
    ENVIRONMENT: DEV
  - name: Deploy
    type: deployer
    target:
      region_id: ${DEV_REGION_ID}
      organization: ${DEV_ORG_NAME}
      space: ${DEV_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      # Push app
      export CF_APP_NAME="dev-$CF_APP"
      cf push "${CF_APP_NAME}" -n ${CF_APP_NAME}
      export APP_URL=http://$(cf app $CF_APP_NAME | grep urls: | awk '{print $2}')
      # View logs
      #cf logs "${CF_APP_NAME}" --recent